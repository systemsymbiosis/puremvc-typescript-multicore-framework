///<reference path='../../../../../../../../test/lib/YUITest.d.ts'/>
///<reference path='../../../../../../../../bin/puremvc-typescript-multicore-1.0.d.ts'/>

///<reference path='FacadeTestCommand.ts'/>
///<reference path='FacadeTestVO.ts'/>

module test
{
	"use strict";

	/**
	 * Test the PureMVC Facade class.
	 */
	export class FacadeTest
	{
		/**
		 * The name of the test case - if not provided, one is automatically generated by the
		 * YUITest framework.
		 */
		name:string = "PureMVC Facade class tests";

		/**
		 * Tests the Facade singleton Factory Method
		 */
		testGetInstance():void
		{
			// Test Factory Method
			var facade:puremvc.IFacade = puremvc.Facade.getInstance('FacadeTestKey1');

			// test assertions
			YUITest.Assert.isNotUndefined
			(
				facade,
				"Expecting facade not to be undefined"
			);

			YUITest.Assert.isInstanceOf
			(
				puremvc.Facade,
				facade,
				"Expecting instance is instance of Facade"
			);
		}

		/**
		 * Tests Command registration and execution via the Facade.
		 *
		 * This test gets the singleton Facade instance and registers the FacadeTestCommand class to
		 * handle 'FacadeTest' Notifications.
		 *
		 * It then sends a notification using the Facade. Success is determined by evaluating a
		 * property on an object placed in the body of the Notification, which will be modified by
		 * the Command.
		 */
		testRegisterCommandAndSendNotification():void
		{
			/*
			 * Create the Facade, register the FacadeTestCommand to handle 'FacadeTest'
			 * notifications.
			 */
			var facade:puremvc.IFacade = puremvc.Facade.getInstance('FacadeTestKey2');
			facade.registerCommand( 'FacadeTestNote', FacadeTestCommand );

			/*
			 * Send notification. The Command associated with the event (FacadeTestCommand) will be
			 * invoked, and will multiply the vo.input value by 2 and set the result on vo.result
			 */
			var vo:FacadeTestVO = new FacadeTestVO( 32 );
			facade.sendNotification( 'FacadeTestNote', vo );

			// test assertions
			YUITest.Assert.areEqual
			(
				64,
				vo.result,
				"Expecting vo.result == 64"
			);
		}

		/**
		 * Tests Command removal via the Facade.
		 *
		 * This test gets the singleton Facade instance and registers the FacadeTestCommand class to
		 * handle 'FacadeTest' Notifcations. Then it removes the command.
		 *
		 * It then sends a Notification using the Facade. Success is determined by evaluating a
		 * property on an object placed in the body of the Notification, which will NOT be modified
		 * by the Command.
		 */
		testRegisterAndRemoveCommandAndSendNotification():void
		{
			// Create the Facade, register the FacadeTestCommand to handle 'FacadeTest' events.
			var facade:puremvc.IFacade = puremvc.Facade.getInstance('FacadeTestKey3');
			facade.registerCommand( 'FacadeTestNote', FacadeTestCommand );
			facade.removeCommand( 'FacadeTestNote' );

			// Send notification. The Command associated with the event
			// (FacadeTestCommand) will NOT be invoked, and will NOT multiply
			// the vo.input value by 2
			var vo:FacadeTestVO = new FacadeTestVO( 32 );
			facade.sendNotification( 'FacadeTestNote', vo );

			// test assertions
			YUITest.Assert.areNotEqual
			(
				64,
				vo.result,
				"Expecting vo.result != 64"
			);
		}

		/**
		 * Tests the registering and retrieving Model proxies via the Facade.
		 *
		 * Tests <code>registerProxy</code> and <code>retrieveProxy</code> in the same test. These
		 * methods cannot currently be tested separately in any meaningful way other than to show
		 * that the methods do not throw exception when called.
		 */
		testRegisterAndRetrieveProxy():void
		{
			// Register a proxy and retrieve it.
			var facade:puremvc.IFacade = puremvc.Facade.getInstance('FacadeTestKey4');
			facade.registerProxy( new puremvc.Proxy( 'colors', ['red', 'green', 'blue'] ) );

			var proxy:puremvc.IProxy = facade.retrieveProxy( 'colors' );

			YUITest.Assert.isInstanceOf
			(
				puremvc.Proxy,
				proxy,
				"Expecting proxy is Proxy"
			);

			// retrieve data from proxy
			var data:Array<any> = proxy.getData();

			// test assertions
			YUITest.Assert.isNotUndefined
			(
				data,
				"Expecting data not null"
			);

			YUITest.Assert.isArray
			(
				data,
				"Expecting data is Array"
			);

			YUITest.Assert.areEqual
			(
				3,
				data.length,
				"Expecting data.length == 3"
			);

			YUITest.Assert.areEqual
			(
				'red',
				data[0],
				"Expecting data[0] == 'red'"
			);

			YUITest.Assert.areEqual
			(
				'green',
				data[1],
				"Expecting data[1] == 'green'"
			);

			YUITest.Assert.areEqual
			(
				'blue',
				data[2],
				"Expecting data[2] == 'blue'"
			);
		}

		/**
		 * Tests the removing Proxies via the Facade.
		 */
		testRegisterAndRemoveProxy():void
		{
			// register a proxy, remove it, then try to retrieve it
			var facade:puremvc.IFacade = puremvc.Facade.getInstance('FacadeTestKey5');
			var proxy:puremvc.IProxy = new puremvc.Proxy( 'sizes', ['7', '13', '21'] );
			facade.registerProxy( proxy );

			// remove the proxy
			var removedProxy:puremvc.IProxy = facade.removeProxy('sizes');

			// test assertions

			// assert that we removed the appropriate proxy
			YUITest.Assert.areEqual
			(
				'sizes',
				removedProxy ? removedProxy.getProxyName() : null,
				"Expecting removedProxy.getProxyName() == 'sizes'"
			);

			// make sure we can no longer retrieve the proxy from the model
			proxy = facade.retrieveProxy( 'sizes' );

			// assert that the proxy is no longer retrievable
			YUITest.Assert.isNull( proxy, "Expecting proxy === null" );
		}

		/**
		 * Tests registering, retrieving and removing Mediators via the Facade.
		 */
		testRegisterRetrieveAndRemoveMediator():void
		{
			// register a mediator, remove it, then try to retrieve it
			var facade:puremvc.IFacade = puremvc.Facade.getInstance('FacadeTestKey6');
			facade.registerMediator( new puremvc.Mediator( puremvc.Mediator.NAME, new Object() ) );

			// retrieve the mediator
			YUITest.Assert.isNotNull
			(
				facade.retrieveMediator( puremvc.Mediator.NAME ),
				"Expecting facade.retrieveMediator( puremvc.Mediator.NAME ) !== null"
			);

			// remove the mediator
			var removedMediator:puremvc.IMediator = facade.removeMediator( puremvc.Mediator.NAME );

			// assert that we have removed the appropriate mediator
			YUITest.Assert.areEqual
			(
				puremvc.Mediator.NAME,
				removedMediator ? removedMediator.getMediatorName() : null,
				"Expecting removedMediator.getMediatorName() == Mediator.NAME"
			);

			// assert that the mediator is no longer retrievable
			YUITest.Assert.isNull
			(
				facade.retrieveMediator( puremvc.Mediator.NAME ),
				"Expecting facade.retrieveMediator( Mediator.NAME ) === null )"
			);
		}

		/**
		 * Tests the hasProxy Method
		 */
		testHasProxy():void
		{
			// register a Proxy
			var facade:puremvc.IFacade = puremvc.Facade.getInstance('FacadeTestKey7');
			facade.registerProxy( new puremvc.Proxy( 'hasProxyTest', [1,2,3] ) );

			// assert that the model.hasProxy method returns true
			// for that proxy name
			YUITest.Assert.isTrue
			(
				facade.hasProxy('hasProxyTest'),
				"Expecting facade.hasProxy('hasProxyTest') === true"
			);
		}

		/**
		 * Tests the hasMediator Method
		 */
		testHasMediator():void
		{
			// register a Mediator
			var facade:puremvc.IFacade = puremvc.Facade.getInstance('FacadeTestKey8');
			facade.registerMediator( new puremvc.Mediator( 'facadeHasMediatorTest', new Object() ) );

			// assert that the facade.hasMediator method returns true
			// for that mediator name
			YUITest.Assert.isTrue
			(
				facade.hasMediator('facadeHasMediatorTest'),
				"Expecting facade.hasMediator('facadeHasMediatorTest') === true"
			);

			facade.removeMediator( 'facadeHasMediatorTest' );

			// assert that the facade.hasMediator method returns false
			// for that mediator name
			YUITest.Assert.isFalse
			(
				facade.hasMediator('facadeHasMediatorTest'),
				"Expecting facade.hasMediator('facadeHasMediatorTest') === false"
			);
		}

		/**
		 * Test hasCommand method.
		 */
		testHasCommand():void
		{
			// register the ControllerTestCommand to handle 'hasCommandTest' notifications
			var facade:puremvc.IFacade = puremvc.Facade.getInstance('FacadeTestKey10');
			facade.registerCommand( 'facadeHasCommandTest', FacadeTestCommand );

			// test that hasCommand returns true for hasCommandTest notifications
			YUITest.Assert.isTrue
			(
				facade.hasCommand('facadeHasCommandTest'),
				"Expecting facade.hasCommand('facadeHasCommandTest') === true"
			);

			// Remove the Command from the Controller
			facade.removeCommand('facadeHasCommandTest');

			// test that hasCommand returns false for hasCommandTest notifications
			YUITest.Assert.isFalse
			(
				facade.hasCommand('facadeHasCommandTest'),
				"Expecting facade.hasCommand('facadeHasCommandTest') === false"
			);
		}

  		/**
  		 * Tests the hasCore and removeCore methods
  		 */
  		testHasCoreAndRemoveCore():void
		{
   			// assert that the Facade.hasCore method returns false first
   			YUITest.Assert.isFalse
			(
				puremvc.Facade.hasCore('FacadeTestKey11'),
				"Expecting Facade.hasCore('FacadeTestKey11') === false"	
			);
			
   			// register a Core
			var facade:puremvc.IFacade = puremvc.Facade.getInstance('FacadeTestKey11');
						
   			// assert that the Facade.hasCore method returns true now that a Core is registered
   			YUITest.Assert.isTrue
			(
   				puremvc.Facade.hasCore('FacadeTestKey11'),
				"Expecting Facade.hasCore('FacadeTestKey11') === true"
			);
			
   			// remove the Core
			puremvc.Facade.removeCore('FacadeTestKey11');
			
   			// assert that the Facade.hasCore method returns false now that the core has been removed.
   			YUITest.Assert.isFalse
			(
   				puremvc.Facade.hasCore('FacadeTestKey11'),
				"Expecting Facade.hasCore('FacadeTestKey11') === false"
			);
		}
	}
}